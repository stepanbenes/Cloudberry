@page "/marecheck"
@page "/marecheck/{DayNumber:int}"

@using ChartJs.Blazor
@using ChartJs.Blazor.LineChart
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Enums
@using ChartJs.Blazor.Common.Axes
@using ChartJs.Blazor.Common.Axes.Ticks
@using ChartJs.Blazor.Common.Handlers
@using ChartJs.Blazor.Interop
@using Cloudberry.Data
@using Newtonsoft.Json.Linq

@inject MarksDiaryService MarkWeightService
@inject NavigationManager NavigationManager

<Chart TConfig="LineConfig" Config="config" @ref="lineChart"></Chart>

<div class="my-4">
    <select class="form-control" value="@selectedDayNumber" @onchange="OnSelectedDayChanged">
        <option value="-1">[Vyber den]</option>
        @foreach (var day in diary.Values)
        {
            <option value="@day.DayNumber">Den @(day.DayNumber) | @(Day.CalculateWeek(day.DayNumber)) | @(day.Date.ToShortDateString()) @(day.Date.DayOfWeek)</option>
        }
    </select>
</div>

<div class="my-4">
    @if (diary.TryGetValue(selectedDayNumber, out var selectedDay))
    {
        <textarea class="form-control" @bind="selectedDayText" @oninput="OnSelectedDayTextInput" style="height: 200px;"></textarea>

        <button class="btn btn-primary btn-block mt-4" @onclick="SaveChangesAsync" disabled="@(!isTextDirty)">Uložit změny</button>

        <div class="my-4">
            @foreach (var imageFilepath in selectedDay.Images)
            {
                <img src="@imageFilepath" alt="@System.IO.Path.GetFileName(imageFilepath)" class="img-thumbnail my-2" />
            }
        </div>

        <div class="my-4">
            @foreach (var videoFilepath in selectedDay.Videos)
            {
                <div class="border-dark m-2">
                    <video width="200" controls>
                        <source src="@videoFilepath" type="video/mp4">
                        <!-- https://stackoverflow.com/questions/27440596/html5-video-tag-not-showing-thumbnail-on-mobile-safari -->
                    </video>
                </div>
            }
        </div>
    }
</div>

@*<div class="my-4">
        <button class="btn btn-secondary btn-block mt-4" @onclick="AddTodayAsync" >Přidat dnešní den</button>
    </div>*@



@code {

    [Parameter]
    public int? DayNumber { get; set; }

    private LineConfig config;
    private Chart? lineChart;

    private SortedDictionary<int, Day> diary = new SortedDictionary<int, Day>();
    private int selectedDayNumber = -1;
    private string? selectedDayText = null;
    private bool isTextDirty = false;

    public Marecheck()
    {
        // see: https://github.com/mariusmuntean/ChartJs.Blazor/blob/master/samples/Shared/ChartJs.Blazor.Sample.Shared/Components/LineChart/LinearLineChartComponent.razor

        config = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Markova váha"
                },
                Legend = new Legend
                {
                    Display = false,
                    Position = Position.Right,
                    Labels = new LegendLabels
                    {
                        UsePointStyle = true
                    }
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = false
                },
                Scales = new Scales
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Den"
                            },
                            GridLines = new GridLines
                            {
                                Display = true
                            },
                            Ticks = new LinearCartesianTicks
                            {
                                SuggestedMin = 0,
                            }
                        }
                },
                    YAxes = new List<CartesianAxis>
                    {
                    new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Váha [g]"
                            },
                            Ticks = new LinearCartesianTicks
                            {
                            }
                        }
                    }
                },
                Hover = new Hover
                {
                    Intersect = true,
                    Mode = InteractionMode.Y
                },
                //OnClick = new DelegateHandler<ChartMouseEvent>(OnLineClick),
            }
        };
    }

    protected override async Task OnInitializedAsync()
    {
        var days = new SortedDictionary<int, Day>();
        await foreach (var day in MarkWeightService.GetMarkDaysAsync())
        {
            days.Add(day.DayNumber, day);
        }

        int today = Day.WhatDayNumberIsToday();
        if (!days.ContainsKey(today))
        {
            days.Add(today, new Day(today, weight: null, text: null, images: new string[0], videos: new string[0]));
        }

        var lineset = new LineDataset<Point>(days.Values.Where(day => day.Weight.HasValue).Select(day => new Point(day.DayNumber, day.Weight.GetValueOrDefault())))
        {
            BorderWidth = 10,
            BorderColor = "#AAAAFF",
        };

        config.Data.Datasets.Add(lineset);
        this.diary = days;

        selectedDayNumber = DayNumber ?? -1;
        onSelectedDayNumberChanged();
    }

    void OnSelectedDayChanged(ChangeEventArgs args)
    {
        if (int.TryParse(args.Value?.ToString(), out selectedDayNumber))
        {
            onSelectedDayNumberChanged();
        }
        else
        {
            selectedDayNumber = -1;
            onSelectedDayNumberChanged();
        }
        updateRoute();
    }

    private void onSelectedDayNumberChanged()
    {
        isTextDirty = false;
        if (diary.TryGetValue(selectedDayNumber, out var selectedDay))
        {
            selectedDayText = selectedDay.Text;
            DayNumber = selectedDayNumber;
        }
        else
        {
            selectedDayText = null;
            DayNumber = null;
        }
    }

    private void updateRoute()
    {
        if (DayNumber is object)
        {
            NavigationManager.NavigateTo($"/marecheck/{DayNumber}");
        }
        else
        {
            NavigationManager.NavigateTo($"/marecheck");
        }
    }

    public void OnSelectedDayTextInput()
    {
        isTextDirty = true;
    }

    async Task SaveChangesAsync()
    {
        if (selectedDayNumber >= 0 && selectedDayText is object)
        {
            var updatedDay = await MarkWeightService.UpdateMarkDayAsync(selectedDayNumber, selectedDayText);
            diary[selectedDayNumber] = updatedDay;
            isTextDirty = false;
        }
    }

    //void OnLineClick(JObject mouseEvent, JArray activeElements)
    //{

    //}
}