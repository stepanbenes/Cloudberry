@page "/marecheck"

@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.Common
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using Cloudberry.Data
@using ChartJs.Blazor.Interop
@using ChartJs.Blazor.ChartJS.Common.Handlers
@using Newtonsoft.Json.Linq

@inject MarkWeightService MarkWeightService

@*<ChartJsLineChart @ref="_lineChart" Config="@_config" Width="600" Height="300"/>*@
<Chart TConfig="LineConfig" Config="_config" @ref="_lineChart"></Chart>

@code {

    private LineConfig _config;
    private Chart<LineConfig> _lineChart;



    protected override async Task OnInitializedAsync()
    {
        // see: https://github.com/mariusmuntean/ChartJs.Blazor/blob/master/samples/Shared/ChartJs.Blazor.Sample.Shared/Components/LineChart/LinearLineChartComponent.razor

        _config = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Markova váha"
                },
                Legend = new Legend
                {
                    Display = false,
                    Position = Position.Right,
                    Labels = new LegendLabels
                    {
                        UsePointStyle = true
                    }
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = false
                },
                Scales = new Scales
                {
                    XAxes = new List<CartesianAxis>
                {
                    new LinearCartesianAxis
                    {
                        ScaleLabel = new ScaleLabel
                        {
                            LabelString = "Den"
                        },
                        GridLines = new GridLines
                        {
                            Display = true
                        },
                        Ticks = new LinearCartesianTicks
                        {
                            SuggestedMin = 0,
                        }
                    }
                },
                    YAxes = new List<CartesianAxis>
                {
                    new LinearCartesianAxis
                    {
                        ScaleLabel = new ScaleLabel
                        {
                            LabelString = "Váha [g]"
                        },
                        Ticks = new LinearCartesianTicks
                        {
                        }
                    }
                }
                },
                Hover = new Hover
                {
                    Intersect = true,
                    Mode = InteractionMode.Y
                },
                OnClick = new DelegateHandler<ChartMouseEvent>(OnLineClick),
            }
        };

        var points = new SortedDictionary<int, Point>();
        await foreach (var (day, weight) in MarkWeightService.GetMarkWeightPointsAsync())
        {
            points.Add(day, new Point(day, weight));
        }

        var lineset = new LineDataset<Point>(points.Values)
        {
            BorderWidth = 10,
            BorderColor = "#AAAAFF",
        };

        _config.Data.Datasets.Add(lineset);

    }

    void OnLineClick(JObject mouseEvent, JArray activeElements)
    {
        
    }
}