@page "/backup"
@page "/backup/{*directoryPath}"

@using Cloudberry.Data

@inject DataBackupService DataBackupService


<div>
    <a href="/backup"><b>data</b></a>
    @foreach (var (pathSegment, combinedPath) in DataBackupService.DirectorySplit(DirectoryPath))
    {
        <b> / </b>
        <a href="@("/backup" + combinedPath)">@pathSegment</a>
    }
</div>

<div class="mt-4">
    <table class="table">
        @*<thead>
                <tr>
                    <th>Date</th>
                    <th>Temp. (C)</th>
                    <th>Temp. (F)</th>
                    <th>Summary</th>
                </tr>
            </thead>*@
        <tbody>
            @foreach (var entry in directoryContent)
            {
                <tr>
                    <td>
                        @if (entry is DirectoryEntry { Name: var directoryName })
                        {
                            <a href="/backup@(DirectoryPath is { Length: > 0 } ? "/" + DirectoryPath : "")/@(directoryName)">@directoryName</a>
                        }
                        else if (entry is FileEntry { Name: var fileName })
                        {
                            @(fileName)
                        }
                    </td>
                    <td>
                        @if (entry is FileEntry { Size: var size })
                        {
                            <span class="text-muted">@(size) B</span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div>
    <select>
        @foreach (var dateTime in backupDateTimes)
        {
            <option value="@dateTime">@dateTime</option>
        }
    </select>
</div>

@code {
    [Parameter]
    public string? DirectoryPath { get; init; }

    private IReadOnlyList<FileSystemEntry> directoryContent { get; set; } = Array.Empty<FileSystemEntry>();
    private IReadOnlyList<DateTime> backupDateTimes { get; set; } = Array.Empty<DateTime>();

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            directoryContent = DataBackupService.GetFileSystemEntries(relativePath: DirectoryPath ?? "").ToList();

            backupDateTimes = await DataBackupService.GetBackupDateTimes(relativePath: DirectoryPath ?? "");
        }
        catch (System.IO.DirectoryNotFoundException)
        {
            // TODO: redirect to not-found page
        }
    }
}
